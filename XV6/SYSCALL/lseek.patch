diff --git a/Makefile b/Makefile
index 09d790c..9caf59f 100644
--- a/Makefile
+++ b/Makefile
@@ -181,6 +181,7 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_lseektest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -250,7 +251,7 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
-	printf.c umalloc.c\
+	printf.c umalloc.c lseektest.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
diff --git a/defs.h b/defs.h
index 82fb982..9587c72 100644
--- a/defs.h
+++ b/defs.h
@@ -33,6 +33,7 @@ void            fileinit(void);
 int             fileread(struct file*, char*, int n);
 int             filestat(struct file*, struct stat*);
 int             filewrite(struct file*, char*, int n);
+int             fileseek(struct file*, int, int);
 
 // fs.c
 void            readsb(int dev, struct superblock *sb);
diff --git a/fcntl.h b/fcntl.h
index d565483..d3129f3 100644
--- a/fcntl.h
+++ b/fcntl.h
@@ -2,3 +2,6 @@
 #define O_WRONLY  0x001
 #define O_RDWR    0x002
 #define O_CREATE  0x200
+#define SEEK_SET   0
+#define SEEK_CURR  1
+#define SEEK_END   2
diff --git a/file.c b/file.c
index 24b32c2..24a06eb 100644
--- a/file.c
+++ b/file.c
@@ -9,6 +9,7 @@
 #include "spinlock.h"
 #include "sleeplock.h"
 #include "file.h"
+#include "fcntl.h"
 
 struct devsw devsw[NDEV];
 struct {
@@ -155,3 +156,46 @@ filewrite(struct file *f, char *addr, int n)
   panic("filewrite");
 }
 
+//Seek file fp by offset bytes from whence
+int
+fileseek(struct file *fp, int offset, int whence)
+{
+	uint fsize;
+	if (!fp->readable || fp->type == FD_PIPE
+			|| whence > 2)
+		return -1;
+	if (fp->type == FD_INODE)
+	{
+		ilock(fp->ip);
+		fsize = fp->ip->size;
+		iunlock(fp->ip);
+
+		switch (whence)
+		{
+			case SEEK_SET :
+				break;
+
+			case SEEK_CURR :
+				{
+					offset += fp->off;
+					break;
+				}
+
+			case SEEK_END :
+				{
+					offset += (fsize - 1);
+					break;
+				}
+			default :
+				return -1;
+		};
+
+		if (offset < fsize)
+		{
+			fp->off = offset;
+			return offset;
+		}
+		return -1;
+	}
+	panic("fileseek");
+}
diff --git a/lseektest.c b/lseektest.c
new file mode 100644
index 0000000..b305572
--- /dev/null
+++ b/lseektest.c
@@ -0,0 +1,207 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fcntl.h"
+#include "fs.h"
+#define min(a, b) ((a) < (b) ? (a) : (b) )
+
+int seek_set_valid(const char *fname)
+{
+	int fd, ret, nx, ny, itr;
+	char xbuf[1024], ybuf[1024];
+
+	ret = -1;
+	fd = open(fname, O_RDONLY);
+	if (fd != -1)
+	{
+		if ((nx = read(fd, xbuf, sizeof xbuf)) > 0)
+			ret = lseek(fd, 0, SEEK_SET);
+		else
+			ret = nx;
+		if ((ny = read(fd, ybuf, sizeof ybuf)) > 0)
+		{
+			itr = min(nx, ny);
+			while(itr--)
+			{
+				if (xbuf[itr] != ybuf[itr])
+				{
+					ret = -1;
+					break;
+				}
+			}
+		}
+		else
+			ret = ny;
+		close(fd);
+	}
+
+	return ret;
+}
+int seek_curr_valid(const char *fname)
+{
+	int fd, ret, nx, ny, itr;
+	char xbuf[1024], ybuf[1024];
+
+	ret = -1;
+	fd = open(fname, O_RDONLY);
+	if (fd != -1)
+	{
+		if ((nx = read(fd, xbuf, sizeof xbuf)) > 0)
+		{
+			ret = lseek(fd, 512, SEEK_CURR);
+			if (ret != -1)
+				ret = lseek(fd, -(512 + nx), SEEK_CURR);
+		}
+		else
+			ret = nx;
+
+		if ((ny = read(fd, ybuf, sizeof ybuf)) > 0)
+		{
+			itr = min(nx, ny);
+			while(itr--)
+			{
+				if (xbuf[itr] != ybuf[itr])
+				{
+					ret = -1;
+					break;
+				}
+			}
+		}
+		else
+			ret = ny;
+		close(fd);
+	}
+
+	return ret;
+}
+int seek_end_valid(const char *fname)
+{
+	int fd, ret, itr, nx, ny;
+	char xbuf[1024], ybuf[1024];
+
+	ret = -1;
+	fd = open(fname, O_RDONLY);
+	if (fd != -1)
+	{
+		ret = lseek(fd, -1024, SEEK_END);
+		if ((nx = read(fd, xbuf, sizeof xbuf)) > 0)
+			ret = lseek(fd, -1024, SEEK_END);
+		else
+			ret = nx;
+
+		if ((ny = read(fd, ybuf, sizeof ybuf)) > 0)
+		{
+			itr = min(nx, ny);
+			while (itr--)
+			{
+				if (xbuf[itr] != ybuf[itr])
+				{
+					ret = -1;
+					break;
+				}
+			}
+		}
+		else
+			ret = ny;
+		close(fd);
+	}
+
+	return ret;
+}
+int seek_set_invalid(const char *fname)
+{
+	int fd, ret;
+
+	ret = 0;
+	fd = open(fname, O_RDONLY);
+	if (fd != -1)
+	{
+		ret = lseek(fd, -1, SEEK_SET);
+		close(fd);
+	}
+	return ret;
+}
+int seek_curr_invalid(const char *fname)
+{
+	int fd, ret;
+
+	ret = 0;
+	fd = open(fname, O_RDONLY);
+	if (fd != -1)
+	{
+		ret = lseek(fd, -1, SEEK_CURR);
+		close(fd);
+	}
+	return ret;
+}
+int seek_end_invalid(const char *fname)
+{
+	int fd, ret;
+
+	ret = 0;
+	fd = open(fname, O_RDONLY);
+	if (fd != -1)
+	{
+		ret = lseek(fd, 1, SEEK_END);
+		close(fd);
+	}
+	return ret;
+}
+int main(const int argc, const char *argv[])
+{
+	int count;
+	const char *fname = "README";
+
+	count = 0;
+	printf(1, "lseektest starting...\n");
+	if (seek_set_valid(fname) == -1)
+	{
+		count++;
+		printf(1, "seek_set_valid failed...\n");
+	}
+	else
+		printf(1, "seek_set_valid test ok...\n");
+
+	if (seek_curr_valid(fname) == -1)
+	{
+		count++;
+		printf(1, "seek_curr_valid failed...\n");
+	}
+	else
+		printf(1, "seek_curr_valid test ok...\n");
+	if (seek_end_valid(fname) == -1)
+	{
+		count++;
+		printf(1, "seek_end_valid failed...\n");
+	}
+	else
+		printf(1, "seek_end_valid test ok...\n");
+	if (seek_set_invalid(fname) != -1)
+	{
+		count++;
+		printf(1, "seek_set_invalid failed...\n");
+	}
+	else
+		printf(1, "seek_set_invalid test ok...\n");
+	if (seek_curr_invalid(fname) != -1)
+	{
+		count++;
+		printf(1, "seek_curr_invalid failed...\n");
+	}
+	else
+		printf(1, "seek_curr_invalid test ok...\n");
+	if (seek_end_invalid(fname) != -1)
+	{
+		count++;
+		printf(1, "seek_end_invalid failed...\n");
+	}
+	else
+		printf(1, "seek_end_invalid test ok...\n");
+
+	if (count)
+		printf(1, "%d/%d test failed...\n", count, 6);
+	else
+		printf(1, "lseektest successful\n");
+
+	return 0;
+}
diff --git a/syscall.c b/syscall.c
index ee85261..bb96e30 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,7 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_lseek(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +127,7 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_lseek]   sys_lseek,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..93fbf00 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_lseek  22
diff --git a/sysfile.c b/sysfile.c
index bfe61b7..6bc8063 100644
--- a/sysfile.c
+++ b/sysfile.c
@@ -442,3 +442,15 @@ sys_pipe(void)
   fd[1] = fd1;
   return 0;
 }
+
+int
+sys_lseek(void)
+{
+	int offset, whence;
+	struct file *fp;
+
+	argint(1, &offset);
+	if (argfd(0, 0, &fp) < 0 || argint(2, &whence) < 0)
+		return -1;
+	return fileseek(fp, offset, whence);
+}
diff --git a/user.h b/user.h
index 4f99c52..d05ba2c 100644
--- a/user.h
+++ b/user.h
@@ -23,6 +23,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int lseek(int, int, int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..6244300 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,4 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(lseek)
