Write a program which given an inode number will 
	print  that  inode  from
		 an ext2 file system.

Submit file, with name
	inodenumber.c

Program runs like this:

	./a.out /dev/sdb1 /10

	(format: ./a.out  device-file-name  inode-number)

	<inode printed here>

Notes:

See this recording: ext2: reading superblock, bg descriptors, and Inode 

Before you start working on this, 
	you need to first completely understand the ext2 file system layout. 
		The notes available at http://wiki.osdev.org/Ext2 should be of help.  
			https://www.nongnu.org/ext2-doc/ext2.html is also useful.

On linux systems the hard disk partitions
	 are accessible thorought the file interface 
		provided by files like /dev/sda1, /dev/sdb2, etc.  

You can call open("/dev/sda2", O_RDONLY) and 
	start reading the partition /dev/sda2 as if it was a file. 
		You need superuser privileges to make this open call. 

So you can try this in a virtualbox environment, 
	by adding an extra disk to your Ubuntu virtual machine 
		and formatting the disk with ext2 layout.

Try reading the file system incrementally, 
	that is superblock, then group descriptors, and 
		so on to make sure that you are on the right path.

Some hints:

super-block starts at 1024 bytes offset, first 1KB is boot-block

	group descriptors start at 1 file-system-block offset
		from the beginning of partition.?
			(consider boot block for first group)
Size of inode is stored in super block

See the online diagrams of data structures for directory entries

Use the 64 bit variants of the file handling library functions (e.g. lseek64)

Try to modularise your code to simplify the work

Use http://wiki.osdev.org

You need to install e2fslibs-dev to get the header files.
================================================================================

FOR BLOCK GROUP ZERO ON ANY PARTITION:
	FIXED :
		SIZEOF(BOOT_BLK) = 1024B

		OFFSET(SUPER_BLK) = SIZEOF(BOOT_BLK)
				  = 1024B

		SIZEOF(SUPER_BLK) = 1024B

		GROUP DESCRIPTOR TABLE STARTS AT NEW BLOCK

	VARIABLE :
		SIZEOF(BLK), DECIDED WHILE FORMATTING USING MKFS (MKE2FS)
	
================================================================================

READING GRP DESC TAB :

	IF SIZEOF(BLK) < 2048B :
		OFFSET(GRP_DESC_TAB) =	SIZEOF(BLK) * 
 						CEIL((SIZEOF(BOOT_BLK) 
							+ SIZEOF(SUPER_BLK))
								/ SIZEOF(BLK))	
	ELSE :
		OFFSET(GRP_DESC_TAB) = SIZEOF(BLK)

CALCULATING BLK GRP NUM (TO LOCATE STRUCT GRP DESC, HENCE INODE TAB), 
		LOCAL INODE IDX (TO LOCATE STRUCT INODE, IN INODE TAB):

	AS BLK GRPS & INODE TABLES (BEING ARRAYS) 
		ARE ZERO BASED INDEXES, 
			SUBSTRACTING ONE FROM NUM_INODE

	LOCATING BLOCK GROUP NUMBER:
		BLK_GRP_NUM = (NUM_INODE - 1) / INODES_PER_GRP

	LOCATING LOCAL (TO BLK GRP) INODE INDEX:
		LOCAL_INODE_IDX = (NUM_INODE - 1) % INODES_PER_GRP

READING BLK GRP DESC (FROM BLK GRP ZERO):

	ASSUME X IS BLK_GRP_NUM, X IN [0..N) :
		OFFSET(STRUCT_GRP_DESC_X) = OFFSET(GRP_DESC_TAB) + 
						X * SIZEOF(STRUCT_GRP_DESC)
		
READING INODE TABLE :

	AS MEMBERS OF STRUCT GROUP_DESC ARE ABSOLUTE BLOCK NUMBERS :
		OFFSET(INODE_TAB) = STRUCT_GRP_DESC.INODE_TABLE * SIZEOF(BLK)

READING INODE :

	ASSUME I IS LOCAL_INODE_IDX, I IN [0..INODES_PER_GRP) :
		OFFSET(STRUCT_INODE_I) = OFFSET(INODE_TAB) + 
						I * SIZEOF(STRUCT_INODE)

================================================================================
